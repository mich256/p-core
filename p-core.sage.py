

# This file was *autogenerated* from the file p-core.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import math

def generating_function(n,p):
	R = QQ['t']; (t,) = R._first_ngens(1)
	K = R.fraction_field()
	return math.prod([(_sage_const_1 -t**(i*p))**(i*p)/(_sage_const_1 -t**i)**i for i in range(n)])

def positivity_test(n,p):
	counter = _sage_const_0 
	R = QQ['t']; (t,) = R._first_ngens(1)
	for i in R(generating_function(n,p)).coefficients():
		if i < _sage_const_0 :
			return counter
		counter += _sage_const_1 

def cs_pp_gf(a,b,c,k):
	s = SymmetricFunctions(QQ).s()
	try:
		return sum([s(p) for p in Partitions(k,max_part=a,length=b)]).expand(c)
	except AttributeError:
		print('emptyset')
		return

def is_cs(pp):
	return all([len(t) == len(set(t)) for t in pp.transpose()])

def cs_pp(a,b,c,k):
	return [pp for pp in PlanePartitions([a,b,c]) if is_cs(pp) and pp.number_of_boxes()==k]

